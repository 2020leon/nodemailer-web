<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodemailer</title>
    <link>https://nodemailer.com/index.xml</link>
    <description>Recent content on Nodemailer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Jan 2017 21:37:15 +0200</lastBuildDate>
    <atom:link href="https://nodemailer.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Why PRO?</title>
      <link>https://nodemailer.com/about/why/</link>
      <pubDate>Fri, 20 Jan 2017 21:37:15 +0200</pubDate>
      
      <guid>https://nodemailer.com/about/why/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Nodemailer PRO&lt;/strong&gt; is an upgrade of Nodemailer. Unlike Nodemailer which is licensed under MIT. Nodemailer PRO is licensed under restrictive CC license and commercial license. See license details in the &lt;a href=&#34;https://nodemailer.com/about/license/&#34;&gt;License page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even though you can use the &lt;a href=&#34;https://community.nodemailer.com/&#34;&gt;community version&lt;/a&gt; of Nodemailer as long as you want, Nodemailer PRO has some benefits over it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nodemailer PRO is &lt;strong&gt;maintained&lt;/strong&gt;. Due to the large amount of effort what it takes to handle a myriad of RFC&amp;rsquo;s and also keep the code updated along ever-upgrading Node.js versions, I haven&amp;rsquo;t had too much time to manage the original Nodemailer. The testimonial being that Nodemailer is still fully ES5 code and works on legacy systems like Node.js 0.10.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Support&lt;/strong&gt;. For paying customers I am able to provide email based help setting up or resolving issues with Nodemailer PRO. For Nodemailer you mostly have to rely on &lt;a href=&#34;http://stackoverflow.com/search?q=nodemailer&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bundled modules&lt;/strong&gt;. Nodemailer PRO does not come alone. In addition you get to use &lt;a href=&#34;https://www.npmjs.com/package/@nodemailer/mailparser2&#34;&gt;Mailparser2&lt;/a&gt; and possibly other modules under the same terms as Nodemailer PRO with no extra cost. More modules coming in the future.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Auditability&lt;/strong&gt;. Nodemailer includes a tree of dependencies. Nodemailer PRO has zero dependencies as everything required (and only that) is built in. There&amp;rsquo;s no dead code or dark corners which makes code audits lot easier. In the future I plan to have regular security audits on Nodemailer PRO code to prevent issues like hidden &lt;a href=&#34;http://thehackernews.com/2017/01/phpmailer-swiftmailer-zendmail.html&#34;&gt;RCE vulnerabilities&lt;/a&gt; that some other email projects have had recently.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Longevity&lt;/strong&gt;. By paying you support the project to keep going on. You can use Nodemailer PRO without fearing that it does not support your latest platform upgrade or suddenly stops doing what really matters – delivering your messages to your customers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;differences&#34;&gt;Differences&lt;/h3&gt;

&lt;p&gt;Nodemailer PRO has dropped some features available in Nodemailer and also introduced some new ones.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All &lt;strong&gt;templating is gone&lt;/strong&gt;. It was too confusing to use and to be really universal a huge list of different renderers would be required. Nodemailer PRO is about email, not about parsing different template sytaxes&lt;/li&gt;
&lt;li&gt;No &lt;strong&gt;NTLM authentication&lt;/strong&gt;. It was too difficult to re-implement. If you still need it then it would be possible to introduce a pluggable SASL interface where you could load the ntlm module in your own code and pass it to Nodemailer PRO. Currently this is not possible.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OAuth2 authentication&lt;/strong&gt; is built in and has a different &lt;a href=&#34;https://nodemailer.com/smtp/oauth2/&#34;&gt;configuration&lt;/a&gt;. You can use both user (3LO) and service (2LO) accounts to generate access tokens from Nodemailer PRO. Additionally there&amp;rsquo;s a new feature to authenticate differently for every message – useful if your application sends on behalf of different users instead of a single sender.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Delivery status notifications&lt;/strong&gt; added to Nodemailer PRO&lt;/li&gt;
&lt;li&gt;Improved &lt;strong&gt;DKIM&lt;/strong&gt; signing of messages. Previously you needed an external module for this and it did quite a lousy job with larger messages&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stream transport&lt;/strong&gt; to return a RFC822 formatted message as a stream. Useful if you want to use Nodemailer PRO as a preprocessor and not for actual delivery.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sendmail&lt;/strong&gt; transport built-in, no need for external transport plugin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Calendaring&lt;/strong&gt;. Provide an ical file to Nodemailer PRO to send out &lt;a href=&#34;https://nodemailer.com/message/calendar-events/&#34;&gt;calendar events&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Long pipeline of things to do&lt;/strong&gt;. Nodemailer PRO is far from being done.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;why&#34;&gt;Why?&lt;/h3&gt;

&lt;p&gt;Simply because I was not able to afford keeping such a large project like Nodemailer alive. If I would make just a single sale of Nodemailer PRO it would still be more than the money I made in donations in the last 6 years I&amp;rsquo;ve been developing Nodemailer. I&amp;rsquo;m mostly interested in building email related modules, it does not matter if the modules are truly open source or not.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://nodemailer.com/about/license/</link>
      <pubDate>Fri, 20 Jan 2017 21:37:15 +0200</pubDate>
      
      <guid>https://nodemailer.com/about/license/</guid>
      <description>&lt;p&gt;Nodemailer PRO is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License&lt;/a&gt;. Community version of Nodemailer is licensed under the MIT license.&lt;/p&gt;

&lt;p&gt;Commercial license (see &lt;a href=&#34;https://nodemailer.com/COMM-LICENSE&#34;&gt;COMM-LICENSE&lt;/a&gt;) is available upon request, see &lt;a href=&#34;https://nodemailer.com/about/pricing&#34;&gt;Pricing&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pricing</title>
      <link>https://nodemailer.com/about/pricing/</link>
      <pubDate>Fri, 20 Jan 2017 21:37:19 +0200</pubDate>
      
      <guid>https://nodemailer.com/about/pricing/</guid>
      <description>

&lt;p&gt;Nodemailer PRO can be purchased from Kreata OÜ with a yearly license. License fee for a &lt;strong&gt;1 year&lt;/strong&gt; license is &lt;strong&gt;780.- €&lt;/strong&gt; (excluding VAT), which can be paid either by PayPal or by international wire transfer. Kreata OÜ is located in the European Union, Estonia.&lt;/p&gt;

&lt;p&gt;Payment details are available on the invoice. Contact &lt;a href=&#34;mailto:sales@nodemailer.com&#34;&gt;sales@nodemailer.com&lt;/a&gt; if you need any assistanse.&lt;/p&gt;

&lt;h4 id=&#34;what-do-you-get-for-that-price&#34;&gt;What do you get for that price&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unlimited usage&lt;/strong&gt; of Nodemailer PRO inside your organization (see applying &lt;a href=&#34;https://nodemailer.com/COMM-LICENSE&#34;&gt;license terms&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Email based &lt;strong&gt;Support&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Bundled &lt;strong&gt;email modules&lt;/strong&gt; under the same terms as Nodemailer PRO. For now this means &lt;a href=&#34;https://www.npmjs.com/package/@nodemailer/mailparser2&#34;&gt;Mailparser2&lt;/a&gt;, additional modules might become available in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;before-purchase&#34;&gt;Before purchase&lt;/h4&gt;

&lt;p&gt;Nodemailer PRO is available under a restrictive license without a fee, so you are free to test Nodemailer PRO before actually buying anything. Sometimes there might be problems between the client software and SMTP server that are hard to resolve so it would be wise to try beforehand if Nodemailer PRO even works for you or not.&lt;/p&gt;

&lt;h4 id=&#34;contact&#34;&gt;Contact&lt;/h4&gt;

&lt;p&gt;Contact sales &lt;a href=&#34;mailto:sales@nodemailer.com&#34;&gt;sales@nodemailer.com&lt;/a&gt; to purchase the license or if you have any other sales related questions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Support</title>
      <link>https://nodemailer.com/about/pro-support/</link>
      <pubDate>Sat, 21 Jan 2017 22:51:02 +0200</pubDate>
      
      <guid>https://nodemailer.com/about/pro-support/</guid>
      <description>&lt;p&gt;Support is available for Nodemailer PRO subscribers. If you have trouble setting up or using Nodemailer PRO then contact &lt;a href=&#34;mailto:support@nodemailer.com&#34;&gt;support@nodemailer.com&lt;/a&gt; for support.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SMTP? Say what?</title>
      <link>https://nodemailer.com/usage/why-smtp/</link>
      <pubDate>Sat, 21 Jan 2017 00:44:30 +0200</pubDate>
      
      <guid>https://nodemailer.com/usage/why-smtp/</guid>
      <description>&lt;p&gt;You might wonder why you would need to set something up while in comparison PHP&amp;rsquo;s &lt;a href=&#34;http://php.net/manual/en/function.mail.php&#34;&gt;mail&lt;/a&gt; command works out of the box with no special configuration whatsoever. Just call &lt;strong&gt;mail(&amp;hellip;)&lt;/strong&gt; and you&amp;rsquo;re already sending mail. So what&amp;rsquo;s going on in Node.js?&lt;/p&gt;

&lt;p&gt;The difference is in the software stack required for your application to work. While Node.js stack is thin, all you need for your app to work is the &lt;em&gt;node&lt;/em&gt; binary, then PHP&amp;rsquo;s stack is fat. The server you&amp;rsquo;re running your PHP code on has several different components installed.&lt;/p&gt;

&lt;p&gt;Firstly the PHP interpreter itself. Then there&amp;rsquo;s some kind of web server, most probably Apache or Nginx. Web server needs some way to interact with the PHP interpreter, so you have a (fast-)CGI process manager. There might be MySQL also running in the same host. Depending on the installation type you might even have &lt;em&gt;imagemagick&lt;/em&gt; executables or other helpers lying around somewhere. And finally, you have the &lt;em&gt;sendmail&lt;/em&gt; binary.&lt;/p&gt;

&lt;p&gt;What PHP&amp;rsquo;s &lt;strong&gt;mail()&lt;/strong&gt; call actually does is that it passes your mail data to sendmail&amp;rsquo;s &lt;em&gt;stdin&lt;/em&gt; and thats it, no magic involved. &lt;em&gt;sendmail&lt;/em&gt; does all the heavy lifting of queueing your message and trying to send it to the recipients&amp;rsquo; MX mail server.&lt;/p&gt;

&lt;p&gt;In fact you can achieve the exact same behavior in Nodemailer PRO as well by using the &lt;a href=&#34;https://nodemailer.com/transports/sendmail/&#34;&gt;sendmail transport&lt;/a&gt;. The difference being that in case of PHP the sendmail configuration resides in &lt;em&gt;php.ini&lt;/em&gt; but in case of Node.js the sendmail configuration is part of Nodemailer PRO setup.&lt;/p&gt;

&lt;p&gt;Unfortunately this might not always work – as it was already said, the stack for Node.js is thin and this means that &lt;em&gt;sendmail&lt;/em&gt; might not have been installed to the server your application is running on. This is why it is better to rely on an actual SMTP service that is always accessible.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Gmail</title>
      <link>https://nodemailer.com/usage/using-gmail/</link>
      <pubDate>Sat, 21 Jan 2017 00:25:10 +0200</pubDate>
      
      <guid>https://nodemailer.com/usage/using-gmail/</guid>
      <description>&lt;p&gt;Even though Gmail is the fastest way to get started with sending emails, it is by no means a preferable solution unless you are using OAuth2 authentication. Gmail expects the user to be an actual user not a robot so it runs a lot of heuristics for every login attempt and blocks anything that looks suspicious to defend the user from account hijacking attempts. For example you might run into trouble if your server is in another geographical location – everything works in your dev machine but messages are blocked in production.&lt;/p&gt;

&lt;p&gt;Additionally Gmail has came up with the concept of &lt;a href=&#34;https://support.google.com/accounts/answer/6010255?hl=en&#34;&gt;&amp;ldquo;Less Secure&amp;rdquo;&lt;/a&gt; apps which is basically anyone who uses plain password to login to Gmail, so you might end up in a situation where one username can send mail (support for &amp;ldquo;less secure&amp;rdquo; apps is enabled) but other is blocked (support for &amp;ldquo;less secure&amp;rdquo; apps is disabled). You can configure your Gmail account to allow less secure apps &lt;a href=&#34;https://www.google.com/settings/security/lesssecureapps&#34;&gt;here&lt;/a&gt;. When using this method make sure to also enable the required functionality by completing the &lt;a href=&#34;https://accounts.google.com/b/0/displayunlockcaptcha&#34;&gt;&amp;ldquo;Captcha Enable&amp;rdquo;&lt;/a&gt; challenge. Without this, less secure connections probably would not work.&lt;/p&gt;

&lt;p&gt;If you are using 2FA you would have to create an &lt;a href=&#34;https://security.google.com/settings/security/apppasswords&#34;&gt;&amp;ldquo;Application Specific&amp;rdquo;&lt;/a&gt; password for Nodemailer PRO to work.&lt;/p&gt;

&lt;p&gt;Gmail also always sets authenticated username as the &lt;em&gt;From:&lt;/em&gt; email address. So if you authenticate as &lt;em&gt;foo@example.com&lt;/em&gt; and set &lt;em&gt;bar@example.com&lt;/em&gt; as the &lt;em&gt;from:&lt;/em&gt; address, then Gmail reverts this and replaces the sender with the authenticated user.&lt;/p&gt;

&lt;p&gt;To prevent having login issues you should either use OAuth2 (see details &lt;a href=&#34;https://nodemailer.com/smtp/oauth2/&#34;&gt;here&lt;/a&gt;) or use another delivery provider and preferably a dedicated one. Usually these providers have free plans available that are comparable to the daily sending limits of Gmail. Gmail has a limit of 500 recipients a day (a message with one &lt;em&gt;To&lt;/em&gt; and one &lt;em&gt;Cc&lt;/em&gt; address counts as two messages since it has two recipients) for @gmail.com addresses and 2000 for Google Apps customers, larger SMTP providers usually offer about 200-300 recipients a day for free.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Delivering bulk mail</title>
      <link>https://nodemailer.com/usage/bulk-mail/</link>
      <pubDate>Sat, 21 Jan 2017 00:40:56 +0200</pubDate>
      
      <guid>https://nodemailer.com/usage/bulk-mail/</guid>
      <description>&lt;p&gt;Here are some tips how to handle bulk mail, for example if you need to send 10 million messages at once.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Use a dedicated delivery provider&lt;/strong&gt;. Do not use services that offer SMTP as a sideline or for free (that&amp;rsquo;s Gmail or the SMTP of your homepage hosting company) to send bulk mail – you&amp;rsquo;ll hit all the hard limits immediately or get labelled as spammer. Basically you get what you pay for and if you pay zero then your deliverability is near zero as well. Email might seem free but it is only free to a certain amount and that amount certainly does not include 10 million emails in a short period of time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use a dedicated queue manager,&lt;/strong&gt; for example &lt;a href=&#34;http://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt; for queueing the emails. Nodemailer PRO creates a callback function with related scopes etc. for every message so it might be hard on memory if you pile up the data for 10 million messages at once. Better to take the data from a queue when there&amp;rsquo;s a free spot in the connection pool (previously sent message returns its callback).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use pooled SMTP&lt;/strong&gt; by setting &lt;em&gt;pool&lt;/em&gt; option to &lt;em&gt;true&lt;/em&gt; (assuming you always send using the same credentials). You do not want to have the overhead of creating a new connection and doing the SMTP handshake dance for every single email. Pooled connections make it possible to bring this overhead to a minimum.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Set &lt;em&gt;maxMessages&lt;/em&gt; option to &lt;em&gt;Infinity&lt;/em&gt;&lt;/strong&gt; for the pooled SMTP transport. Dedicated SMTP providers happily accept all your emails as long you are paying for these, so no need to disconnect in the middle if everything is going smoothly. The default value is 100 which means that once a connection is used to send 100 messages it is removed from the pool and a new connection is created.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Set &lt;em&gt;maxConnections&lt;/em&gt; to whatever your system can handle.&lt;/strong&gt; There might be limits to this on the receiving side, so do not set it to &lt;em&gt;Infinity&lt;/em&gt;, even 20 is probably much better than the default 5. A larger number means a larger amount of messages are sent in parallel.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use file paths not URLs for attachments.&lt;/strong&gt; If you are reading the same file from the disk several million times, the contents for the file probably get cached somewhere between your app and the physical hard disk, so you get your files back quicker (assuming you send the same attachment to all recipients). There is nothing like this for URLs – every new message makes a fresh HTTP fetch to receive the file from the server.&lt;/li&gt;
&lt;li&gt;If the SMTP service accepts HTTP API as well you still might prefer SMTP and not the HTTP API as HTTP introduces additional overhead. You probably want to use HTTP over SMTP if the HTTP API is bulk aware – you send a message template and the list of 10 million recipients and the service compiles this information into emails itself, you can&amp;rsquo;t beat this with SMTP.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Attachments</title>
      <link>https://nodemailer.com/message/attachments/</link>
      <pubDate>Sat, 21 Jan 2017 00:09:16 +0200</pubDate>
      
      <guid>https://nodemailer.com/message/attachments/</guid>
      <description>&lt;p&gt;&lt;strong&gt;attachments&lt;/strong&gt; option in the message object that contains an array of attachment objects.&lt;/p&gt;

&lt;p&gt;Attachment object consists of the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;filename&lt;/strong&gt; - filename to be reported as the name of the attached file. Use of unicode is allowed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;content&lt;/strong&gt; - String, Buffer or a Stream contents for the attachment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt; - path to the file if you want to stream the file instead of including it (better for larger attachments)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;href&lt;/strong&gt; – an URL to the file (data uris are allowed as well)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;contentType&lt;/strong&gt; - optional content type for the attachment, if not set will be derived from the &lt;em&gt;filename&lt;/em&gt; property&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;contentDisposition&lt;/strong&gt; - optional content disposition type for the attachment, defaults to &amp;lsquo;attachment&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cid&lt;/strong&gt; - optional content id for using inline images in HTML message source&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;encoding&lt;/strong&gt; - If set and &lt;em&gt;content&lt;/em&gt; is string, then encodes the content to a Buffer using the specified encoding. Example values: &lt;em&gt;&amp;lsquo;base64&amp;rsquo;&lt;/em&gt;, &lt;em&gt;&amp;lsquo;hex&amp;rsquo;&lt;/em&gt;, &lt;em&gt;&amp;lsquo;binary&amp;rsquo;&lt;/em&gt; etc. Useful if you want to use binary attachments in a JSON formatted email object.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;headers&lt;/strong&gt; - custom headers for the attachment node. Same usage as with message headers&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;raw&lt;/strong&gt; - is an optional special value that overrides entire contents of current mime node including mime headers. Useful if you want to prepare node contents yourself&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Attachments can be added as many as you want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let message = {
    ...
    attachments: [
        {   // utf-8 string as an attachment
            filename: &#39;text1.txt&#39;,
            content: &#39;hello world!&#39;
        },
        {   // binary buffer as an attachment
            filename: &#39;text2.txt&#39;,
            content: new Buffer(&#39;hello world!&#39;,&#39;utf-8&#39;)
        },
        {   // file on disk as an attachment
            filename: &#39;text3.txt&#39;,
            path: &#39;/path/to/file.txt&#39; // stream this file
        },
        {   // filename and content type is derived from path
            path: &#39;/path/to/file.txt&#39;
        },
        {   // stream as an attachment
            filename: &#39;text4.txt&#39;,
            content: fs.createReadStream(&#39;file.txt&#39;)
        },
        {   // define custom content type for the attachment
            filename: &#39;text.bin&#39;,
            content: &#39;hello world!&#39;,
            contentType: &#39;text/plain&#39;
        },
        {   // use URL as an attachment
            filename: &#39;license.txt&#39;,
            path: &#39;https://raw.github.com/nodemailer/nodemailer/master/LICENSE&#39;
        },
        {   // encoded string as an attachment
            filename: &#39;text1.txt&#39;,
            content: &#39;aGVsbG8gd29ybGQh&#39;,
            encoding: &#39;base64&#39;
        },
        {   // data uri as an attachment
            path: &#39;data:text/plain;base64,aGVsbG8gd29ybGQ=&#39;
        },
        {
            // use pregenerated MIME node
            raw: &#39;Content-Type: text/plain\r\n&#39; +
                 &#39;Content-Disposition: attachment;\r\n&#39; +
                 &#39;\r\n&#39; +
                 &#39;Hello world!&#39;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Alternatives</title>
      <link>https://nodemailer.com/message/alternatives/</link>
      <pubDate>Sat, 21 Jan 2017 00:12:25 +0200</pubDate>
      
      <guid>https://nodemailer.com/message/alternatives/</guid>
      <description>&lt;p&gt;In addition to text and HTML, any kind of data can be inserted as an alternative content of the main body - for example a word processing document with the same text as in the HTML field. It is the job of the email client to select and show the best fitting alternative to the reader. Usually this field is used for calendar events and such.&lt;/p&gt;

&lt;div class=&#34;notices tip&#34; &gt;&lt;p&gt;If you want to use a calendar event as the alternative, the consider using the &lt;strong&gt;icalEvent&lt;/strong&gt; option instead. See details &lt;a href=&#34;https://nodemailer.com/message/calendar-events/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;Alternative objects use the same options as &lt;a href=&#34;https://nodemailer.com/attachments/&#34;&gt;attachment objects&lt;/a&gt;. The difference between an attachment and an alternative is the fact that attachments are placed into &lt;em&gt;multipart/mixed&lt;/em&gt; or &lt;em&gt;multipart/related&lt;/em&gt; parts of the message white alternatives are placed into &lt;em&gt;multipart/alternative&lt;/em&gt; part.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let message = {
    ...
    html: &#39;&amp;lt;b&amp;gt;Hello world!&amp;lt;/b&amp;gt;&#39;,
    alternatives: [
        {
            contentType: &#39;text/x-web-markdown&#39;,
            content: &#39;**Hello world!**&#39;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatives can be added as many as you want.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Address object</title>
      <link>https://nodemailer.com/message/addresses/</link>
      <pubDate>Fri, 20 Jan 2017 20:58:57 +0200</pubDate>
      
      <guid>https://nodemailer.com/message/addresses/</guid>
      <description>&lt;p&gt;All email addresses can be &lt;strong&gt;plain&lt;/strong&gt; email addresses&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#39;foobar@blurdybloop.com&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;or with &lt;strong&gt;formatted name&lt;/strong&gt; (includes unicode support)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#39;Ноде Майлер &amp;lt;foobar@blurdybloop.com&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;notices tip&#34; &gt;&lt;p&gt;Notice that all address fields (even &lt;em&gt;from:&lt;/em&gt;) are comma separated lists, so if you want to use a comma (or any other special symbol) in the name part, make sure you enclose the name in double quotes like this: &lt;code&gt;&#39;&amp;quot;Майлер, Ноде&amp;quot; &amp;lt;foobar@blurdybloop.com&amp;gt;&#39;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;or as an &lt;strong&gt;address object&lt;/strong&gt; (in this case you do not need to worry about the formatting, no need to use quotes etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
    name: &#39;Майлер, Ноде&#39;,
    address: &#39;foobar@blurdybloop.com&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All address fields accept values as a comma separated list of emails or an array of emails or an array of comma separated list of emails or address objects - use it as you like. Formatting can be mixed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;...,
to: &#39;foobar@blurdybloop.com, &amp;quot;Ноде Майлер&amp;quot; &amp;lt;bar@blurdybloop.com&amp;gt;, &amp;quot;Name, User&amp;quot; &amp;lt;baz@blurdybloop.com&amp;gt;&#39;,
cc: [
    &#39;foobar@blurdybloop.com&#39;,
    &#39;&amp;quot;Ноде Майлер&amp;quot; &amp;lt;bar@blurdybloop.com&amp;gt;,
    &amp;quot;Name, User&amp;quot; &amp;lt;baz@blurdybloop.com&amp;gt;&#39;
],
bcc: [
    &#39;foobar@blurdybloop.com&#39;,
    {
        name: &#39;Майлер, Ноде&#39;,
        address: &#39;foobar@blurdybloop.com&#39;
    }
]
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can even use unicode domains, these are automatically converted to punycode&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#39;&amp;quot;Unicode Domain&amp;quot; &amp;lt;info@müriaad-polüteism.info&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Calendar events</title>
      <link>https://nodemailer.com/message/calendar-events/</link>
      <pubDate>Fri, 20 Jan 2017 12:01:43 +0200</pubDate>
      
      <guid>https://nodemailer.com/message/calendar-events/</guid>
      <description>

&lt;p&gt;Calendar events are tricky because different email clients handle these differently. Nodemailer PRO uses the same style as Gmail for attaching calendar files which should ensure maximum compatibility. If you want to attach a calendar event to your email then you can use the message option &lt;strong&gt;icalEvent&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;icalEvent&lt;/strong&gt; – an object to define calendar event&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;method&lt;/strong&gt; – optional method, case insensitive, defaults to &lt;em&gt;&amp;lsquo;publish&amp;rsquo;&lt;/em&gt;. Other possible values would be &lt;em&gt;&amp;lsquo;request&amp;rsquo;&lt;/em&gt;, &lt;em&gt;&amp;lsquo;reply&amp;rsquo;&lt;/em&gt;, &lt;em&gt;&amp;lsquo;cancel&amp;rsquo;&lt;/em&gt; or any other valid calendar method listed in &lt;a href=&#34;https://tools.ietf.org/html/rfc5546#section-1.4&#34;&gt;RFC5546&lt;/a&gt;. This should match the &lt;strong&gt;METHOD:&lt;/strong&gt; value in calendar event file.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;filename&lt;/strong&gt; – optional filename, defaults to &lt;em&gt;&amp;lsquo;invite.ics&amp;rsquo;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;content&lt;/strong&gt; – is the event file, it can be a string, a buffer, a stream, a file path (&lt;em&gt;content:{path:&amp;lsquo;&amp;hellip;&amp;rsquo;}&lt;/em&gt;) or even an URL (&lt;em&gt;content:{href:&amp;lsquo;&amp;hellip;&amp;rsquo;}&lt;/em&gt;). You can use modules like &lt;a href=&#34;https://www.npmjs.com/package/ical-generator&#34;&gt;ical-generator&lt;/a&gt; to generate the actual calendar file content, Nodemailer PRO acts as a transport layer only and does not generate the event file structure.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;notices note&#34; &gt;&lt;p&gt;In general it is not a good idea to add additional attachments to calendar messages as it might mess up the behavior of some email clients. Try to keep it only to &lt;strong&gt;text&lt;/strong&gt;, &lt;strong&gt;html&lt;/strong&gt; and &lt;strong&gt;icalEvent&lt;/strong&gt; without any additional &lt;strong&gt;alternatives&lt;/strong&gt; or &lt;strong&gt;attachments&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;


&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;h4 id=&#34;1-send-a-request-event-as-a-string&#34;&gt;1. Send a REQUEST event as a string&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let content = &#39;BEGIN:VCALENDAR\r\nPRODID:-//ACME/DesktopCalendar//EN\r\nMETHOD:REQUEST\r\n...&#39;;

let message = {
    from: &#39;sender@example.com&#39;,
    to: &#39;recipient@example.com&#39;,
    subject: &#39;Appointment&#39;,
    text: &#39;Please see the attached appointment&#39;,
    icalEvent: {
        filename: &#39;invitation.ics&#39;,
        method: &#39;request&#39;,
        content: content
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-send-a-publish-event-from-a-file&#34;&gt;2. Send a PUBLISH event from a file&lt;/h4&gt;

&lt;p&gt;Event data is loaded from the provided file and attached to the message.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let message = {
    from: &#39;sender@example.com&#39;,
    to: &#39;recipient@example.com&#39;,
    subject: &#39;Appointment&#39;,
    text: &#39;Please see the attached appointment&#39;,
    icalEvent: {
        method: &#39;PUBLISH&#39;,
        content: {
            path: &#39;/path/to/file&#39;
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-send-a-cancel-event-from-an-url&#34;&gt;3. Send a CANCEL event from an URL&lt;/h4&gt;

&lt;p&gt;Event data is downloaded from the provided URL and attached to the message as regular calendar file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let message = {
    from: &#39;sender@example.com&#39;,
    to: &#39;recipient@example.com&#39;,
    subject: &#39;Appointment&#39;,
    text: &#39;Please see the attached appointment&#39;,
    icalEvent: {
        method: &#39;REQUEST&#39;,
        content: {
            href: &#39;http://www.example.com/events?event=123&#39;
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Embedded images</title>
      <link>https://nodemailer.com/message/embedded-images/</link>
      <pubDate>Sat, 21 Jan 2017 00:09:24 +0200</pubDate>
      
      <guid>https://nodemailer.com/message/embedded-images/</guid>
      <description>

&lt;p&gt;Attachments can be used as embedded images in the HTML body. To use this feature, you need to set additional property of the attachment - &lt;strong&gt;cid&lt;/strong&gt; (unique identifier of the file) which is a reference to the attachment file. The same &lt;strong&gt;cid&lt;/strong&gt; value must be used as the image URL in HTML (using &lt;strong&gt;cid:&lt;/strong&gt; as the URL protocol, see example below).&lt;/p&gt;

&lt;div class=&#34;notices note&#34; &gt;&lt;p&gt;&lt;strong&gt;NB!&lt;/strong&gt; the cid value should be as unique as possible!&lt;/p&gt;
&lt;/div&gt;


&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let message = {
    ...
    html: &#39;Embedded image: &amp;lt;img src=&amp;quot;cid:unique@nodemailer.com&amp;quot;/&amp;gt;&#39;,
    attachments: [{
        filename: &#39;image.png&#39;,
        path: &#39;/path/to/file&#39;,
        cid: &#39;unique@nodemailer.com&#39; //same cid value as in the html img src
    }]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>List headers</title>
      <link>https://nodemailer.com/message/list-headers/</link>
      <pubDate>Fri, 20 Jan 2017 12:01:57 +0200</pubDate>
      
      <guid>https://nodemailer.com/message/list-headers/</guid>
      <description>

&lt;p&gt;Nodemailer PRO includes a helper for setting more complex &lt;em&gt;List-*&lt;/em&gt; headers with ease. You can use this by providing message option &lt;strong&gt;list&lt;/strong&gt;. It&amp;rsquo;s an object where key names are converted into list headers. List key &lt;em&gt;help&lt;/em&gt; becomes &lt;em&gt;List-Help&lt;/em&gt; header etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;General rules&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the value is a string, it is treated as an URL&lt;/li&gt;
&lt;li&gt;If you want to provide an optional comment, use &lt;em&gt;{url:&amp;lsquo;url&amp;rsquo;, comment: &amp;lsquo;comment&amp;rsquo;}&lt;/em&gt; object&lt;/li&gt;
&lt;li&gt;If you want to have multiple header rows for the same &lt;em&gt;List-*&lt;/em&gt; key, use an array as the value for this key&lt;/li&gt;
&lt;li&gt;If you want to have multiple URLs for single &lt;em&gt;List-*&lt;/em&gt; header row, use an array inside an array&lt;/li&gt;
&lt;li&gt;&lt;em&gt;List-*&lt;/em&gt; headers are treated as pregenerated values, this means that lines are not folded and strings are not encoded. Use only ascii characters and be prepared for longer header lines&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;h4 id=&#34;1-setup-different-list-headers&#34;&gt;1. Setup different List-* headers&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let message = {
    from: &#39;sender@example.com&#39;,
    to: &#39;recipient@example.com&#39;,
    subject: &#39;List Message&#39;,
    text: &#39;I hope no-one unsubscribes from this list!&#39;,
    list: {
        // List-Help: &amp;lt;mailto:admin@example.com?subject=help&amp;gt;
        help: &#39;admin@example.com?subject=help&#39;,
        // List-Unsubscribe: &amp;lt;http://example.com&amp;gt; (Comment)
        unsubscribe: {
            url: &#39;http://example.com&#39;,
            comment: &#39;Comment&#39;
        },
        // List-Subscribe: &amp;lt;mailto:admin@example.com?subject=subscribe&amp;gt;
        // List-Subscribe: &amp;lt;http://example.com&amp;gt; (Subscribe)
        subscribe: [
            &#39;admin@example.com?subject=subscribe&#39;,
            {
                url: &#39;http://example.com&#39;,
                comment: &#39;Subscribe&#39;
            }
        ],
        // List-Post: &amp;lt;http://example.com/post&amp;gt;, &amp;lt;mailto:admin@example.com?subject=post&amp;gt; (Post)
        post: [
            [
                &#39;http://example.com/post&#39;,
                {
                    url: &#39;admin@example.com?subject=post&#39;,
                    comment: &#39;Post&#39;
                }
            ]
        ]
    }
};
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Custom headers</title>
      <link>https://nodemailer.com/message/custom-headers/</link>
      <pubDate>Fri, 20 Jan 2017 12:37:05 +0200</pubDate>
      
      <guid>https://nodemailer.com/message/custom-headers/</guid>
      <description>

&lt;p&gt;Most messages do not need any kind of tampering with the headers. If you do need to add custom headers either to the message or to an attachment/alternative, you can add these values with the &lt;strong&gt;headers&lt;/strong&gt; option. Values are processed automatically, non-ascii strings are encoded as mime-words and long lines are folded.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;headers&lt;/strong&gt; – is an object of key-value pairs, where key names are converted into message header keys&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;h4 id=&#34;1-set-custom-headers&#34;&gt;1. Set custom headers&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let message = {
    ...,
    headers: {
        &#39;x-my-key&#39;: &#39;header value&#39;,
        &#39;x-another-key&#39;: &#39;another value&#39;
    }
}

// Becomes:
//   X-My-Key: header value
//   X-Another-Key: another value
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-multiple-rows-with-the-same-key&#34;&gt;2. Multiple rows with the same key&lt;/h4&gt;

&lt;p&gt;The same header key can be used multiple times if the header value is an Array&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let message = {
    ...,
    headers: {
        &#39;x-my-key&#39;: [
            &#39;value for row 1&#39;,
            &#39;value for row 2&#39;,
            &#39;value for row 3&#39;
        ]
    }
}

// X-My-Key: value for row 1
// X-My-Key: value for row 2
// X-My-Key: value for row 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-prepared-headers&#34;&gt;3. Prepared headers&lt;/h4&gt;

&lt;p&gt;Normally all headers are encoded and folded to meet the requirement of having plain-ASCII messages with lines no longer than 78 bytes. Sometimes it is preferable to not modify header values and pass these as provided. This can be achieved with the &lt;strong&gt;prepared&lt;/strong&gt; option:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let message = {
    ...,
    headers: {
        &#39;x-processed&#39;: &#39;a really long header or value with non-ascii characters 👮&#39;,
        &#39;x-unprocessed&#39;: {
            prepared: true,
            value: &#39;a really long header or value with non-ascii characters 👮&#39;
        }
    }
}

// X-Processed: a really long header or value with non-ascii characters
//  =?UTF-8?Q?=F0=9F=91=AE?=
// X-Unprocessed: a really long header or value with non-ascii characters ?
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Custom source</title>
      <link>https://nodemailer.com/message/custom-source/</link>
      <pubDate>Fri, 20 Jan 2017 12:37:52 +0200</pubDate>
      
      <guid>https://nodemailer.com/message/custom-source/</guid>
      <description>

&lt;p&gt;If you want to use your own custom generated RFC822 formatted message source, instead of letting Nodemailer PRO to generate it from the message options, use option &lt;strong&gt;raw&lt;/strong&gt;. This can be used both for the entire message or alternatively per-attachment or per-alternative.&lt;/p&gt;

&lt;div class=&#34;notices note&#34; &gt;&lt;p&gt;Don&amp;rsquo;t forget to set the &lt;strong&gt;envelope&lt;/strong&gt; option when using &lt;strong&gt;raw&lt;/strong&gt; as the message source&lt;/p&gt;
&lt;/div&gt;


&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;h4 id=&#34;1-use-string-as-a-message-body&#34;&gt;1. Use string as a message body&lt;/h4&gt;

&lt;p&gt;This example loads the entire message source from a string value. You don&amp;rsquo;t have to worry about proper newlines, these are handled by Nodemailer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let message = {
    envelope: {
        from: &#39;sender@example.com&#39;,
        to: [&#39;recipient@example.com&#39;]
    },
    raw: `From: sender@example.com
To: recipient@example.com
Subject: test message

Hello world!`
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-set-eml-file-as-message-body&#34;&gt;2. Set EML file as message body&lt;/h4&gt;

&lt;p&gt;This example loads the entire message source from a file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let message = {
    envelope: {
        from: &#39;sender@example.com&#39;,
        to: [&#39;recipient@example.com&#39;]
    },
    raw: {
        path: &#39;/path/to/message.eml&#39;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-set-string-as-attachment-body&#34;&gt;3. Set string as attachment body&lt;/h4&gt;

&lt;p&gt;When using &lt;strong&gt;raw&lt;/strong&gt; for attachments then you need to provide all content headers youself, Nodemailer PRO does not process it in any way (besides newline processing), it is inserted into the MIME tree as is.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let message = {
    from: &#39;sender@example.com&#39;,
    to: &#39;recipient@example.com&#39;,
    subject: &#39;Custom attachment&#39;,
    attachments: [{
        raw: `Content-Type: text/plain
Content-Disposition: attachment

Attached text file`}]
};
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>