<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SMTP transport on Nodemailer</title>
    <link>https://nodemailer.com/smtp/</link>
    <description>Recent content in SMTP transport on Nodemailer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Jan 2017 10:51:36 +0200</lastBuildDate>
    
	<atom:link href="https://nodemailer.com/smtp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SMTP envelope</title>
      <link>https://nodemailer.com/smtp/envelope/</link>
      <pubDate>Fri, 20 Jan 2017 11:20:07 +0200</pubDate>
      
      <guid>https://nodemailer.com/smtp/envelope/</guid>
      <description>SMTP envelope is usually auto generated from from, to, cc and bcc fields in the message object but if for some reason you want to specify it yourself (custom envelopes are usually used for VERP addresses), you can do it with the envelope property in the message object.
 envelope – is an object with the following address params that behave just like with regular mail options. You can also use the regular address format, unicode domains etc.</description>
    </item>
    
    <item>
      <title>Pooled SMTP</title>
      <link>https://nodemailer.com/smtp/pooled/</link>
      <pubDate>Fri, 20 Jan 2017 11:20:07 +0200</pubDate>
      
      <guid>https://nodemailer.com/smtp/pooled/</guid>
      <description>If pooling is used then Nodemailer keeps a fixed amount of connections open and sends the next message once a connection becomes available. It is mostly useful when you have a large number of messages that you want to send in batches or your provider allows you to only use a small amount of parallel connections.
To use pooled connections use the following options in transport configuration
 pool – set to true to use pooled connections (defaults to false) instead of creating a new connection for every email maxConnections – is the count of maximum simultaneous connections to make against the SMTP server (defaults to 5) maxMessages – limits the message count to be sent using a single connection (defaults to 100).</description>
    </item>
    
    <item>
      <title>Testing SMTP</title>
      <link>https://nodemailer.com/smtp/testing/</link>
      <pubDate>Fri, 20 Jan 2017 11:20:07 +0200</pubDate>
      
      <guid>https://nodemailer.com/smtp/testing/</guid>
      <description>When building complex applications then sooner or later you end up in a situation where you need to send emails from your application in test environment but do not want to accidentally spam anyone.
One solution would be to separate development email addresses and use only some specific testing address to send all mail to but a better approach would be to use a separate email catching service that accepts all messages like a normal transactional SMTP service would but instead of delivering these to destination, it only logs these messages.</description>
    </item>
    
    <item>
      <title>OAuth2</title>
      <link>https://nodemailer.com/smtp/oauth2/</link>
      <pubDate>Fri, 20 Jan 2017 10:45:57 +0200</pubDate>
      
      <guid>https://nodemailer.com/smtp/oauth2/</guid>
      <description>OAuth2 allows your application to store and use authentication tokens instead of actual login credentials. This is great for security as tokens or valid only for specific actions and can be easily revoked thus, once stolen, can&amp;rsquo;t to as much harm as actual account credentials. OAuth2 authentication in Nodemailer is mostly used with Gmail and G Suite (née Google Apps) even though there are other providers that support it as well.</description>
    </item>
    
    <item>
      <title>Custom authentication</title>
      <link>https://nodemailer.com/smtp/customauth/</link>
      <pubDate>Fri, 20 Jan 2017 11:16:41 +0200</pubDate>
      
      <guid>https://nodemailer.com/smtp/customauth/</guid>
      <description>Available from Nodemailer v5.1.0
 Nodemailer SMTP client can be extended to use custom authentication mechanisms that Nodemailer does not support by default.
To use one you should define a custom authentication handler with customAuth in the transporter options. Multiple handlers can be defined. Use authentication identifier as the handler name. For example if the server responds with &amp;ldquo;AUTH LOGIN PLAIN MY-CUSTOM-METHOD&amp;rdquo; then it supports &amp;ldquo;LOGIN&amp;rdquo;, &amp;ldquo;PLAIN&amp;rdquo; and &amp;ldquo;MY-CUSTOM-METHOD&amp;rdquo;. Nodemailer has built in support form &amp;ldquo;LOGIN&amp;rdquo; and &amp;ldquo;PLAIN&amp;rdquo; but it knows nothing about &amp;ldquo;MY-CUSTOM-METHOD&amp;rdquo;, to add support use this identifier as the handler name.</description>
    </item>
    
    <item>
      <title>Proxy support</title>
      <link>https://nodemailer.com/smtp/proxies/</link>
      <pubDate>Fri, 20 Jan 2017 11:16:41 +0200</pubDate>
      
      <guid>https://nodemailer.com/smtp/proxies/</guid>
      <description>Nodemailer is able to use proxies for connecting to SMTP servers. HTTP proxy support is built in, Socks proxy support can be enabled by providing socks module to Nodemailer, other proxies need custom handling.
To enable proxying, define a proxy option for the transporter.
 proxy – is a proxy URL  Examples 1. Using HTTP proxy Set HTTP proxy url for the proxy option. That&amp;rsquo;s it, everything required to handle it is built into Nodemailer.</description>
    </item>
    
    <item>
      <title>Delivery status notifications</title>
      <link>https://nodemailer.com/smtp/dsn/</link>
      <pubDate>Fri, 20 Jan 2017 11:20:07 +0200</pubDate>
      
      <guid>https://nodemailer.com/smtp/dsn/</guid>
      <description>If your delivery service supports it (not all SMTP servers have DSN extension enabled), then you can use Delivery status notifications (DSN) with Nodemailer as defined in RFC3461.
To set up a DSN call, add a dsn property to message data
  dsn – optional object to define DSN options
 id – is the envelope identifier that would be included in the response (ENVID) return – is either &amp;lsquo;headers&amp;rsquo; or &amp;lsquo;full&amp;rsquo;.</description>
    </item>
    
  </channel>
</rss>